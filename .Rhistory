2+2
#eresrs
m
m <- matrix (c(5,-2,1,-10),nrow=2, byrow=T)
m <- matrix(c(5,-2,1,-10), nrow=2, byrow=T)
View(m)
View(m)
# c stands for combine
# byrow=T  --> fill in row by row
# default: fill in column by column
#  |5  -2|
#  |1 -10|
m <- matrix(c(5,-2,1,-10), nrow=2, byrow=T)
m
m <- matrix(c(5,-2,1,-10), nrow=2, byrow=T)
m
m <- matrix(c(5,-2,1,-10), nrow=2, byrow=T)
m
m <- matrix(c(5,-2,1,-10), nrow=2, byrow=T)
m
b<-c(13,7)
b
solve(m,b)
solve(m,b)
b<-c(13,-7)
b
solve(m,b)
x1old <-0
x2old<-0
for( n in 1:5) {
x1new <- 2.6 +0.4*x2old
x2new <- 0.7 +0.1*x1old
print (c(x1new,x2new))
x1old <-x1new
x2old<-x2new
}
for( n in 1:10) {
x1new <- 2.6 +0.4*x2old
x2new <- 0.7 +0.1*x1old
print (c(x1new,x2new))
x1old <-x1new
x2old <-x2new
}
x1old <-0
x2old<-0
for( n in 1:10) {
x1new <- 2.6 +0.4*x2old
x2new <- 0.7 +0.1*x1old
print (c(x1new,x2new))
x1old <-x1new
x2old <-x2new
}
library(pracma)
install.packages("pracma")
library(pracma)
#
# Demo 01: A Handy R Function
#
# Some functions are built into R, but others are
# defined in "packages" the need to be installed
# and called into your R session.
# Below we install and call in the "pracma"
# package, which has a lot of functions for
# linear algebra.  Here we focus on just one,
# we will see more later.
# This downloads (only needed once) and installs
# the "pracma" package.
install.packages("pracma")
# This loads the pracma library into your current
# working session.  You need to run this with each
# new R session where it is used.
library(pracma)
## Reduced Row Echelon Form
# Define the augmented matrix in S1.2, Example 4
entries <- c(0,0,6,0,19,11,-27,
3,12,9,-6,26,31,-63,
1,4,3,-2,10,9,-17,
-1,-4,-4,2,-13,-11,22)
m <- matrix(entries,nrow=4,byrow=T)
m
install.packages("pracma")
entries <- c(0,0,6,0,19,11,-27,
3,12,9,-6,26,31,-63,
1,4,3,-2,10,9,-17,
-1,-4,-4,2,-13,-11,22)
m <- matrix(entries,nrow=4,byrow=T)
m
rref(m)
entries <- c(0,0,6,0,19,11,-27,
3,12,9,-6,26,31,-63,
1,4,3,-2,10,9,-17,
-1,-4,-4,2,-13,-11,22)
m <- matrix(entries,nrow=4,byrow=T)
m
# The function "rref" will transform the matrix to
# the reduced row echelon form.
rref(m)
entries <- c(0,0,6,0,19,11,-27,
3,12,9,-6,26,31,-63,
1,4,3,-2,10,9,-17,
-1,-4,-4,2,-13,-11,22)
m <- matrix(entries,nrow=4,byrow=T)
m
rref(m)
library(pracma)
rref(m)
c(2,3,4,5)    # C stands for "combine" or "concatenate" or "list"
c(2,3,4,5)    # C stands for "combine" or "concatenate" or "list"
c(2,3,4,5) + c(1,4,2,3)
c(2,3,4)*2
c(2,3,4,5) + c(5,10)
c(2,3,4,5,6) + c(1,2)
c(1,2,5)^c(2,2,3)
c(1,2,5)^c(2,3)
(1:11) %% 2
(1:11) %% 2 == 1  # True when element odd
install.packages("tidyverse") # Downloads library; only required once
library(tidyverse) # Load the core tidyverse packages: ggplot2, tibble,
# tidyr, readr, purrr, and dplyr
setwd("/Users/Pan/Google Drive/Data Science/SYS 6018/sys6018-competition-house-prices")
library(readr)
library(dplyr)
test<-read.csv("test.csv")
train<-read.csv("train.csv")
str(train)
#separate factor var & numeric var
fac_var <- names(train)[which(sapply(train, is.factor))]      #factor variables' colnames (no need to convert to factor)
numeric_var <- names(train)[which(sapply(train, is.numeric))] #numeric variables' colnames
na_list[numeric_var]
train$GarageYrBlt[is.na(train$GarageYrBlt)] <- 0
train$MasVnrArea[is.na(train$MasVnrArea)] <- 0
train$LotFrontage[is.na(train$LotFrontage)] <- 0
train[fac_var]<-as.character(train[fac_var])
train$Alley[is.na(train$Alley)]<-'na'  #No alley access
View(train)
train$BsmtQual[is.na(train$BsmtQual)]<-'na' #No Basement
train$BsmtQual[is.na(train$BsmtQual)]<-'na' #No Basement
train$BsmtCond[is.na(train$BsmtCond)]<-'na' #No Basement
train$BsmtQual[is.na(train$BsmtQual)]<-'na' #No Basement
train$BsmtCond[is.na(train$BsmtCond)]<-'na' #No Basement
train$BsmtExposure[is.na(train$BsmtExposure)]<-'na'#No Basement
train$BsmtFinType1[is.na(train$BsmtFinType1)]<-'na'#No Basement
train$BsmtFinType2[is.na(train$BsmtFinType2)]<-'na'#No Basement
train$FireplaceQu[is.na(train$FireplaceQu)]<-'na'#No Fireplace
train$GarageType[is.na(train$GarageType)]<-'na'#No Garage
train$GarageQual[is.na(train$GarageQual)]<-'na'#No Garage
train$GarageCond[is.na(train$GarageCond)]<-'na'#No Garage
train$PoolQC[is.na(train$PoolQC)]<-'na'#No Pool
train$Fence[is.na(train$Fence)]<-'na'#No Fence
train$MiscFeature[is.na(train$MiscFeature)]<-'na'#None
train$Alley[is.na(train$Alley)]<-'na'  #No alley access
train$BsmtQual[is.na(train$BsmtQual)]<-'na' #No Basement
train$BsmtCond[is.na(train$BsmtCond)]<-'na' #No Basement
train$BsmtExposure[is.na(train$BsmtExposure)]<-'na'#No Basement
train$BsmtFinType1[is.na(train$BsmtFinType1)]<-'na'#No Basement
train$BsmtFinType2[is.na(train$BsmtFinType2)]<-'na'#No Basement
train$FireplaceQu[is.na(train$FireplaceQu)]<-'na'#No Fireplace
train$GarageType[is.na(train$GarageType)]<-'na'#No Garage
train$GarageQual[is.na(train$GarageQual)]<-'na'#No Garage
train$GarageCond[is.na(train$GarageCond)]<-'na'#No Garage
train$PoolQC[is.na(train$PoolQC)]<-'na'#No Pool
train$Fence[is.na(train$Fence)]<-'na'#No Fence
train$MiscFeature[is.na(train$MiscFeature)]<-'na'#None
train[fac_var]<-as.factor(train[fac_var])
test<-read.csv("test.csv")
train<-read.csv("train.csv")
fac_var <- names(train)[which(sapply(train, is.factor))]      #factor variables' colnames (no need to convert to factor)
numeric_var <- names(train)[which(sapply(train, is.numeric))] #numeric variables' colnames
na_list[numeric_var]
train$GarageYrBlt[is.na(train$GarageYrBlt)] <- 0
train$MasVnrArea[is.na(train$MasVnrArea)] <- 0
train$LotFrontage[is.na(train$LotFrontage)] <- 0
View(train)
train[,fac_var]<-as.character(train[,fac_var])
train$Alley[is.na(train$Alley)]<-'na'  #No alley access
View(train)
train<-read.csv("train.csv")
View(train)
train[fac_var]<-as.character(train[fac_var])
View(train)
train<-read.csv("train.csv")
train[,numeric_var]
train[,fac_var]<-lapply(train[,fac_var],factro)
train[,fac_var]<-lapply(train[,fac_var],factor)
train$Alley[is.na(train$Alley)]<-'na'  #No alley access
train[,fac_var]<-lapply(train[,fac_var],character)
train[,fac_var]<-lapply(train[,fac_var],factor)
train[,fac_var]<-lapply(train[,fac_var],as.character)
train$Alley[is.na(train$Alley)]<-'na'  #No alley access
train$Alley[is.na(train$Alley)]<-'na'  #No alley access
train$BsmtQual[is.na(train$BsmtQual)]<-'na' #No Basement
train$BsmtCond[is.na(train$BsmtCond)]<-'na' #No Basement
train$BsmtExposure[is.na(train$BsmtExposure)]<-'na'#No Basement
train$BsmtFinType1[is.na(train$BsmtFinType1)]<-'na'#No Basement
train$BsmtFinType2[is.na(train$BsmtFinType2)]<-'na'#No Basement
train$FireplaceQu[is.na(train$FireplaceQu)]<-'na'#No Fireplace
train$GarageType[is.na(train$GarageType)]<-'na'#No Garage
train$GarageQual[is.na(train$GarageQual)]<-'na'#No Garage
train$GarageCond[is.na(train$GarageCond)]<-'na'#No Garage
train$PoolQC[is.na(train$PoolQC)]<-'na'#No Pool
train$Fence[is.na(train$Fence)]<-'na'#No Fence
train$MiscFeature[is.na(train$MiscFeature)]<-'na'#None
train$GarageYrBlt[is.na(train$GarageYrBlt)] <- 0
train$MasVnrArea[is.na(train$MasVnrArea)] <- 0
train$LotFrontage[is.na(train$LotFrontage)] <- 0
colSums(is.na(train))
train$GarageFinish[is.na(train$GarageFinish)]<-'na'#No Garage
colSums(is.na(train))
train$MasVnrType[is.na(train$MasVnrType)]<-'na'
train$Electrical[is.na(train$Electrical)]<-'na'
train[,fac_var]<-lapply(train[,fac_var],factor)
colSums(is.na(train)
colSums(is.na(train))
colSums(is.na(train))
train[,fac_var]<-lapply(train[,fac_var],as.character)
train$MasVnrType[is.na(train$MasVnrType)]<-'None'
train[,fac_var]<-lapply(train[,fac_var],factor)
lm1 <- lm(SalePrice ~., data=train)
summary(lm1)
setwd("/Users/Pan/Google Drive/Data Science/SYS 6018/sys6018-competition-house-prices")
library(readr)
library(dplyr)
# --------------- Data Cleaning ----------------
#Read data
test<-read.csv("test.csv")
train<-read.csv("train.csv")
str(train)
#separate factor var & numeric var
fac_var <- names(train)[which(sapply(train, is.factor))]      #factor variables' colnames (no need to convert to factor)
numeric_var <- names(train)[which(sapply(train, is.numeric))] #numeric variables' colnames
# any duplicate row? no.
cat("The number of duplicated rows are", nrow(train) - nrow(unique(train)))
#Identify na
na_list<-colSums(is.na(train)) #count na in each col
na_list[na_list!=0]            #print those cols with na
names(na_list[na_list!=0])
#fix numeric_var's na
na_list[numeric_var]
train$GarageYrBlt[is.na(train$GarageYrBlt)] <- 0
train$MasVnrArea[is.na(train$MasVnrArea)] <- 0
train$LotFrontage[is.na(train$LotFrontage)] <- 0
#fix factor_var's na based on data_description
train[,fac_var]<-lapply(train[,fac_var],as.character) #convert factor variables to character
train$Alley[is.na(train$Alley)]<-'na'  #No alley access
train$BsmtQual[is.na(train$BsmtQual)]<-'na' #No Basement
train$BsmtCond[is.na(train$BsmtCond)]<-'na' #No Basement
train$BsmtExposure[is.na(train$BsmtExposure)]<-'na'#No Basement
train$BsmtFinType1[is.na(train$BsmtFinType1)]<-'na'#No Basement
train$BsmtFinType2[is.na(train$BsmtFinType2)]<-'na'#No Basement
train$FireplaceQu[is.na(train$FireplaceQu)]<-'na'#No Fireplace
train$GarageType[is.na(train$GarageType)]<-'na'#No Garage
train$GarageQual[is.na(train$GarageQual)]<-'na'#No Garage
train$GarageCond[is.na(train$GarageCond)]<-'na'#No Garage
train$GarageFinish[is.na(train$GarageFinish)]<-'na'#No Garage
train$PoolQC[is.na(train$PoolQC)]<-'na'#No Pool
train$Fence[is.na(train$Fence)]<-'na'#No Fence
train$MiscFeature[is.na(train$MiscFeature)]<-'na'#None
train$MasVnrType[is.na(train$MasVnrType)]<-'None'  #there is a none category, so just make na to none
train$Electrical[is.na(train$Electrical)]<-'na'  #there is only 1 na
train[,fac_var]<-lapply(train[,fac_var],factor) #convert character variables to factors
colSums(is.na(train)) #no more na!
# --------------- Parametric ----------------
# Create the original regression model using all variables
lm1 <- lm(SalePrice ~., data=train)
summary(lm1) # Adjusted R-squared:  0.9192
# Trying to find the best fit by running all possible combination of variables
# compare the significance level of each variable and the value for adjusted R-squared
library(MASS)
fit <- lm(SalePrice ~., data=train)
step <- stepAIC(fit, direction="both")
lm_final <- lm(SalePrice ~ MSSubClass + MSZoning + LotArea + Street + LandContour +
Utilities + LotConfig + LandSlope + Neighborhood + Condition1 +
Condition2 + BldgType + OverallQual + OverallCond + YearBuilt +
YearRemodAdd + RoofStyle + RoofMatl + Exterior1st + MasVnrType +
MasVnrArea + ExterQual + BsmtQual + BsmtCond + BsmtExposure +
BsmtFinSF1 + BsmtFinSF2 + BsmtUnfSF + X1stFlrSF + X2ndFlrSF +
BsmtFullBath + FullBath + BedroomAbvGr + KitchenAbvGr + KitchenQual +
TotRmsAbvGrd + Functional + Fireplaces + GarageCars + GarageArea +
GarageQual + GarageCond + WoodDeckSF + ScreenPorch + PoolArea +
PoolQC + Fence + MoSold + SaleCondition, data=train)
summary(lm_final) # Adjusted R-squared:  0.9202
test_fac_var <- names(test)[which(sapply(test, is.factor))]      #factor variables' colnames (no need to convert to factor)
test_numeric_var <- names(test)[which(sapply(test, is.numeric))] #numeric variables' colnames
test_na_list<-colSums(is.na(test)) #count na in each col
test_na_list[test_na_list!=0]            #print those cols with na
names(test_na_list[test_na_list!=0])
#fix numeric_var's na
test_na_list[test_numeric_var]
test$GarageYrBlt[is.na(test$GarageYrBlt)] <- 0
test$MasVnrArea[is.na(test$MasVnrArea)] <- 0
test$LotFrontage[is.na(test$LotFrontage)] <- 0
test[,test_fac_var]<-lapply(test[,test_fac_var],as.character) #convert factor variables to character
test$Alley[is.na(test$Alley)]<-'na'  #No alley access
test$BsmtQual[is.na(test$BsmtQual)]<-'na' #No Basement
test$BsmtCond[is.na(test$BsmtCond)]<-'na' #No Basement
test$BsmtExposure[is.na(test$BsmtExposure)]<-'na'#No Basement
test$BsmtFinType1[is.na(test$BsmtFinType1)]<-'na'#No Basement
test$BsmtFinType2[is.na(test$BsmtFinType2)]<-'na'#No Basement
test$FireplaceQu[is.na(test$FireplaceQu)]<-'na'#No Fireplace
test$GarageType[is.na(test$GarageType)]<-'na'#No Garage
test$GarageQual[is.na(test$GarageQual)]<-'na'#No Garage
test$GarageCond[is.na(test$GarageCond)]<-'na'#No Garage
test$GarageFinish[is.na(test$GarageFinish)]<-'na'#No Garage
test$PoolQC[is.na(test$PoolQC)]<-'na'#No Pool
test$Fence[is.na(test$Fence)]<-'na'#No Fence
test$MiscFeature[is.na(test$MiscFeature)]<-'na'#None
test$MasVnrType[is.na(test$MasVnrType)]<-'None'  #there is a none category, so just make na to none
test$Electrical[is.na(test$Electrical)]<-'na'  #there is only 1 na
test[,test_fac_var]<-lapply(test[,test_fac_var],factor) #convert character variables to factors
colSums(is.na(test)) #no more na!
test$dataset<-'test'
train$dataset<-'train'
comb<-rbind(test,train)
test$SalePrice<-NA
train$dataset<-'train'
comb<-rbind(test,train)
fac_var <- names(comb)[which(sapply(comb, is.factor))]      #factor variables' colnames (no need to convert to factor)
numeric_var <- names(comb)[which(sapply(comb, is.numeric))] #numeric variables' colnames
# any duplicate row? no.
cat("The number of duplicated rows are", nrow(comb) - nrow(unique(comb)))
#Identify na
na_list<-colSums(is.na(comb)) #count na in each col
na_list[na_list!=0]            #print those cols with na
names(na_list[na_list!=0])
#fix numeric_var's na
na_list[numeric_var]
comb$GarageYrBlt[is.na(comb$GarageYrBlt)] <- 0
comb$MasVnrArea[is.na(comb$MasVnrArea)] <- 0
comb$LotFrontage[is.na(comb$LotFrontage)] <- 0
#fix factor_var's na based on data_description
comb[,fac_var]<-lapply(comb[,fac_var],as.character) #convert factor variables to character
comb$Alley[is.na(comb$Alley)]<-'na'  #No alley access
comb$BsmtQual[is.na(comb$BsmtQual)]<-'na' #No Basement
comb$BsmtCond[is.na(comb$BsmtCond)]<-'na' #No Basement
comb$BsmtExposure[is.na(comb$BsmtExposure)]<-'na'#No Basement
comb$BsmtFinType1[is.na(comb$BsmtFinType1)]<-'na'#No Basement
comb$BsmtFinType2[is.na(comb$BsmtFinType2)]<-'na'#No Basement
comb$FireplaceQu[is.na(comb$FireplaceQu)]<-'na'#No Fireplace
comb$GarageType[is.na(comb$GarageType)]<-'na'#No Garage
comb$GarageQual[is.na(comb$GarageQual)]<-'na'#No Garage
comb$GarageCond[is.na(comb$GarageCond)]<-'na'#No Garage
comb$GarageFinish[is.na(comb$GarageFinish)]<-'na'#No Garage
comb$PoolQC[is.na(comb$PoolQC)]<-'na'#No Pool
comb$Fence[is.na(comb$Fence)]<-'na'#No Fence
comb$MiscFeature[is.na(comb$MiscFeature)]<-'na'#None
comb$MasVnrType[is.na(comb$MasVnrType)]<-'None'  #there is a none category, so just make na to none
comb$Electrical[is.na(comb$Electrical)]<-'na'  #there is only 1 na
comb[,fac_var]<-lapply(comb[,fac_var],factor) #convert character variables to factors
colSums(is.na(comb)) #no more na!
na_list<-colSums(is.na(comb)) #count na in each col
na_list[na_list!=0]            #print those cols with na
names(na_list[na_list!=0])
View(comb)
comb[comb$BsmtFinSF1==na,]
comb[comb$BsmtFinSF1==NA]
comb[comb$BsmtFinSF1==NA,]
test[test$BsmtFinSF1==NA,]
test[,test$BsmtFinSF1==NA]
test[test$BsmtFinSF1==NA,]
test[is.na(test$BsmtFinSF1),]
comb$BsmtFinSF1[is.na(comb$BsmtFinSF1)]<-'na'
comb$BsmtUnfSF[is.na(comb$BsmtUnSF1)]<-'na'
comb$BsmtUnfSF[is.na(comb$BsmtUnfSF)]<-'na'
comb$TotalBsmtSF[is.na(comb$TotalBsmtSF)]<-0
comb[is.na(comb$GarageCars),]
comb$GarageCars[is.na(comb$GarageCars),]<-0
comb$GarageArea[is.na(comb$GarageArea),]<-0
comb$GarageCars[is.na(comb$GarageCars)]<-0
comb$GarageArea[is.na(comb$GarageArea)]<-0
comb$BsmtFullBath[is.na(comb$BsmtFullBath)]<-0
comb$BsmtHalfBath[is.na(comb$BsmtHalfBath)]<-0
comb$BsmtFinSF1[is.na(comb$BsmtFinSF1)]<-0
comb$BsmtFinSF2[is.na(comb$BsmtFinSF2)]<-0
comb$BsmtUnfSF[is.na(comb$BsmtUnfSF)]<-0
comb$TotalBsmtSF[is.na(comb$TotalBsmtSF)]<-0
comb$BsmtFullBath[is.na(comb$BsmtFullBath)]<-0
comb$BsmtHalfBath[is.na(comb$BsmtHalfBath)]<-0
comb$GarageCars[is.na(comb$GarageCars)]<-0
comb$GarageArea[is.na(comb$GarageArea)]<-0
comb[is.na(comb$KitchenQual),]
na_list<-colSums(is.na(comb)) #count na in each col
na_list[na_list!=0]           #print those cols with na
comb$SaleType[is.na(comb$SaleType)]<-'Oth'
na_list<-colSums(is.na(comb)) #count na in each col
na_list[na_list!=0]           #print those cols with na
comb[is.na(comb$Functional),]
comb[is.na(comb$MSZoning),]
comb$Utilities[is.na(comb$Utilities)]<-'AllPub'
count(comb$Exterior1st)
count(group_by(comb$Exterior1st))
nrow(group_by(comb$Exterior1st))
comb%>%group_by(Exterior2nd)%>%summarise()
comb%>%group_by(Exterior2nd)%>%summarise(count)
comb%>%group_by(Exterior2nd)%>%summarise(no_rows=length(Exterior2nd))
comb$Exterior1st[is.na(comb$Exterior2nd)]<-'VinylSd' #most count
comb%>%group_by(Exterior1st)%>%summarise(no_rows=length(Exterior1st))
comb$Exterior1st[is.na(Comb$exterior1st)]<-'VinylSd' #most count
comb$Exterior1st[is.na(comb$exterior1st)]<-'VinylSd' #most count
comb$Exterior1st[is.na(comb$Exterior1st)]<-'VinylSd' #most count
na_list<-colSums(is.na(comb)) #count na in each col
na_list[na_list!=0]           #print those cols with na
na_list<-colSums(is.na(comb))
na_list[na_list!=0]           #print those cols with na
comb%>%group_by(Exterior2nd)%>%summarise(no_rows=length(Exterior2nd))
comb$Exterior1st[is.na(comb$Exterior2nd)]<-'VinylSd' #most count
comb$Exterior1st[is.na(comb$Exterior1st)]<-'VinylSd' #most count
comb$Functional[is.na(comb$Functional)]<-'Typ' #?there are 2 na. Just assume them as typical.
comb$KitchenQual[is.na(comb$Functional)]<-'TA'#?
comb$MSZoning[is.na(comb$MSZoning)]<-'RL'#? replacing with the max count type
comb$Utilities[is.na(comb$Utilities)]<-'AllPub'
na_list<-colSums(is.na(comb)) #count na in each col
na_list[na_list!=0]
comb$Exterior2nd[is.na(comb$Exterior2nd)]<-'VinylSd' #most count
comb$KitchenQual[is.na(comb$KitchenQual)]<-'TA'#?
comb<-rbind(test,train)
cat("The number of duplicated rows are", nrow(comb) - nrow(unique(comb)))
na_list<-colSums(is.na(comb)) #count na in each col
na_list[na_list!=0]            #print those cols with na
names(na_list[na_list!=0])
test<-read.csv("test.csv")
train<-read.csv("train.csv")
test$dataset<-'test'
test$SalePrice<-NA
train$dataset<-'train'
comb<-rbind(test,train)
fac_var <- names(comb)[which(sapply(comb, is.factor))]      #factor variables' colnames (no need to convert to factor)
numeric_var <- names(comb)[which(sapply(comb, is.numeric))] #numeric variables' colnames
cat("The number of duplicated rows are", nrow(comb) - nrow(unique(comb)))
na_list<-colSums(is.na(comb)) #count na in each col
na_list[na_list!=0]            #print those cols with na
names(na_list[na_list!=0])
#fix some numeric_var's na
comb$GarageYrBlt[is.na(comb$GarageYrBlt)] <- 0
comb$MasVnrArea[is.na(comb$MasVnrArea)] <- 0
comb$LotFrontage[is.na(comb$LotFrontage)] <- 0
comb[,fac_var]<-lapply(comb[,fac_var],as.character) #convert factor variables to character
comb$Alley[is.na(comb$Alley)]<-'na'  #No alley access
comb$BsmtQual[is.na(comb$BsmtQual)]<-'na' #No Basement
comb$BsmtQual[is.na(comb$BsmtQual)]<-'na' #No Basement
comb$BsmtCond[is.na(comb$BsmtCond)]<-'na' #No Basement
comb$BsmtExposure[is.na(comb$BsmtExposure)]<-'na'#No Basement
comb$BsmtFinType1[is.na(comb$BsmtFinType1)]<-'na'#No Basement
comb$BsmtFinType2[is.na(comb$BsmtFinType2)]<-'na'#No Basement
comb$FireplaceQu[is.na(comb$FireplaceQu)]<-'na'#No Fireplace
comb$GarageType[is.na(comb$GarageType)]<-'na'#No Garage
comb$GarageQual[is.na(comb$GarageQual)]<-'na'#No Garage
comb$GarageCond[is.na(comb$GarageCond)]<-'na'#No Garage
comb$GarageFinish[is.na(comb$GarageFinish)]<-'na'#No Garage
comb$PoolQC[is.na(comb$PoolQC)]<-'na'#No Pool
comb$Fence[is.na(comb$Fence)]<-'na'#No Fence
comb$MiscFeature[is.na(comb$MiscFeature)]<-'na'#None
comb$BsmtQual[is.na(comb$BsmtQual)]<-'na' #No Basement
comb$BsmtCond[is.na(comb$BsmtCond)]<-'na' #No Basement
comb$BsmtExposure[is.na(comb$BsmtExposure)]<-'na'#No Basement
comb$BsmtFinType1[is.na(comb$BsmtFinType1)]<-'na'#No Basement
comb$BsmtFinType2[is.na(comb$BsmtFinType2)]<-'na'#No Basement
comb$FireplaceQu[is.na(comb$FireplaceQu)]<-'na'#No Fireplace
comb$GarageType[is.na(comb$GarageType)]<-'na'#No Garage
comb$GarageQual[is.na(comb$GarageQual)]<-'na'#No Garage
comb$GarageCond[is.na(comb$GarageCond)]<-'na'#No Garage
comb$GarageFinish[is.na(comb$GarageFinish)]<-'na'#No Garage
comb$PoolQC[is.na(comb$PoolQC)]<-'na'#No Pool
comb$Fence[is.na(comb$Fence)]<-'na'#No Fence
comb$MiscFeature[is.na(comb$MiscFeature)]<-'na'#None
comb$MasVnrType[is.na(comb$MasVnrType)]<-'None'  #there is a none category, so just make na to none
na_list<-colSums(is.na(comb)) #count na in each col
na_list[na_list!=0]           #print those cols with na
comb$BsmtFinSF1[is.na(comb$BsmtFinSF1)]<-0
comb$BsmtFinSF2[is.na(comb$BsmtFinSF2)]<-0
comb$BsmtUnfSF[is.na(comb$BsmtUnfSF)]<-0
comb$TotalBsmtSF[is.na(comb$TotalBsmtSF)]<-0
comb$BsmtFullBath[is.na(comb$BsmtFullBath)]<-0
comb$BsmtHalfBath[is.na(comb$BsmtHalfBath)]<-0
comb$GarageCars[is.na(comb$GarageCars)]<-0
comb$GarageArea[is.na(comb$GarageArea)]<-0
comb$SaleType[is.na(comb$SaleType)]<-'Oth'
comb[is.na(comb$Functional),]
comb$Functional[is.na(comb$Functional)]<-'Typ' #?there are 2 na. Just assume them as typical.
comb$KitchenQual[is.na(comb$KitchenQual)]<-'TA'#?
comb$MSZoning[is.na(comb$MSZoning)]<-'RL'#? replacing with the max count type
comb$Utilities[is.na(comb$Utilities)]<-'AllPub'
comb$Exterior2nd[is.na(comb$Exterior2nd)]<-'VinylSd' #max count
comb$Exterior1st[is.na(comb$Exterior1st)]<-'VinylSd' #max count
comb%>%group_by(Electrical)%>%summarise(no_rows=length(Electrical))
comb$Electrical[is.na(comb$Electrical)]<-'SBrkr'  #?max count
na_list<-colSums(is.na(comb)) #count na in each col
na_list[na_list!=0]
comb[,fac_var]<-lapply(comb[,fac_var],factor) #convert character variables to factors
lm1 <- lm(SalePrice ~., data=comb[dataset='train',])
lm1 <- lm(SalePrice ~., data=comb[dataset=='train',])
lm1 <- lm(SalePrice ~., data=comb[comb$dataset=='train',])
View(comb)
lm1 <- lm(SalePrice ~., data=comb[comb$dataset=='train',c(1:80,82)])
summary(lm1) # Adjusted R-squared:  0.9192
library(MASS)
fit <- lm(SalePrice ~., data=comb[comb$dataset=='train',c(1:80,82)])
step <- stepAIC(fit, direction="both")
lm_final <- lm(SalePrice ~ MSSubClass + MSZoning + LotArea + Street + LandContour +
Utilities + LotConfig + LandSlope + Neighborhood + Condition1 +
Condition2 + BldgType + OverallQual + OverallCond + YearBuilt +
YearRemodAdd + RoofStyle + RoofMatl + Exterior1st + MasVnrType +
MasVnrArea + ExterQual + BsmtQual + BsmtCond + BsmtExposure +
BsmtFinSF1 + BsmtFinSF2 + BsmtUnfSF + X1stFlrSF + X2ndFlrSF +
BsmtFullBath + FullBath + BedroomAbvGr + KitchenAbvGr + KitchenQual +
TotRmsAbvGrd + Functional + Fireplaces + GarageCars + GarageArea +
GarageQual + GarageCond + WoodDeckSF + ScreenPorch + PoolArea +
PoolQC + Fence + MoSold + SaleCondition, data=comb[comb$dataset=='train',c(1:80,82)])
summary(lm_final) # Adjusted R-squared:  0.9202
preds <- as.vector(predict(lm_final, newdata=comb[comb$dataset=='test',1:80]))
table <- data.frame(test$Id, preds)
View(table)
colSums(is.na(table))
